/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Chitrashala;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author saw
 */
public class Layout extends javax.swing.JFrame {

    /**
     * Creates new form Layout
     */
    public Layout() {
        super("Chitrashala");
        initComponents();
    }
    
    JLabel jLab = new JLabel();
    int width = 950;
    int height= 650;
    BufferedImage tempImg = new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB); 
   // BufferedImage undoImg = new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB); 
    //BufferedImage Default = new BufferedImage(1120,825,BufferedImage.TYPE_INT_ARGB);
    File f ;
    // = new File("Image/Default.jpg");
   // Default = ImageIO.read(f1);
    int flag = 0;
    BufferedImage set;
    int r;
    int g;
    int b;
    int a;
    int p;
    int length=0;
    String website,FileName = "Downloads/Download.jpg";
    int fb=5;
    int sepia_flag = 0;
    int greyscale_flag = 0;
    public void Display(BufferedImage e)
    {
        //ProgressBar.setValue(r);
        set = e;
        jLab.setIcon(new ImageIcon(e));
        jLab.setHorizontalAlignment(JLabel.CENTER);
        jsp.getViewport().add(jLab);
        
        
    }
     public void initImage ( BufferedImage image)
     {
         width = image.getWidth();
         height = image.getHeight();
     }
     public void DownloadImage()
     {
         if((website=Download_Link.getText())!= null)
         {   
         progressLog.append("Download Started \n");
         try{
         URL url = new URL(website);
         OutputStream outputstream;
             try (InputStream inputstream = url.openStream()) {
                 outputstream = new FileOutputStream(FileName);
                 byte[] buffer = new byte[2048];
                 while( (length = inputstream.read(buffer))!= -1)
                 {
                     float percentage = (length/inputstream.read(buffer))*100;
                     //progressLog.append(percentage+"% \n");
                     //System.out.println("Buffer Read of Length" + length);
                     outputstream.write(buffer,0,length);
                     run((int)percentage);
                     JSP_progress.setValue((int)percentage);
                     
                     
                     
                     
                     
                     
                 }       progressLog.append("Download Complete \n");
             }
         outputstream.close();
         
         }
         catch(Exception e){
            System.out.println("An error has occoured"+ e);
            progressLog.append("Error : Enter Valid Link \n");
         }
     }
     else
     {
             progressLog.append("Enter Valid Download Link \n");
             }
     
     }
     public void run(int progress)
     {
         JSP_progress.setValue(progress);
     }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        popupMenu1 = new java.awt.PopupMenu();
        jsp = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        Control_Panel = new javax.swing.JPanel();
        Sepia = new javax.swing.JButton();
        MIrrored = new javax.swing.JButton();
        GreyScale = new javax.swing.JButton();
        Negative = new javax.swing.JButton();
        HIstogram = new javax.swing.JButton();
        Footer = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        progressLog = new javax.swing.JTextArea();
        Progresslog = new javax.swing.JTextField();
        ClearLog = new javax.swing.JButton();
        Controls = new javax.swing.JTextField();
        Preview_Original = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        Brightness = new javax.swing.JTextField();
        IncreaseBrightness = new javax.swing.JButton();
        DecreaseBrightness = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Paste = new javax.swing.JButton();
        Download_Link = new javax.swing.JTextField();
        Save_As = new javax.swing.JTextField();
        SaveAs = new javax.swing.JButton();
        Load = new javax.swing.JButton();
        DownloadImage = new javax.swing.JButton();
        Restore = new javax.swing.JButton();
        JSP_progress = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        Jmi_File = new javax.swing.JMenu();
        jmi_LoadImage = new javax.swing.JMenuItem();
        jmi_Clear = new javax.swing.JMenuItem();
        jmi_Exit = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenuItem4.setText("jMenuItem4");

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jsp.setBackground(new java.awt.Color(67, 227, 227));
        jsp.setBorder(null);
        jsp.setForeground(new java.awt.Color(214, 217, 223));
        jsp.setViewportBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jsp.setFocusTraversalKeysEnabled(false);
        jsp.setFont(new java.awt.Font("Avenir Next", 1, 13)); // NOI18N
        jsp.setIgnoreRepaint(true);
        jsp.setInheritsPopupMenu(true);
        jsp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jspMousePressed(evt);
            }
        });

        jButton1.setText("jButton1");

        Control_Panel.setBackground(new java.awt.Color(225, 227, 228));
        Control_Panel.setForeground(new java.awt.Color(12, 141, 255));
        Control_Panel.setFont(new java.awt.Font("Avenir Next", 1, 13)); // NOI18N

        Sepia.setBackground(new java.awt.Color(12, 141, 255));
        Sepia.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        Sepia.setForeground(new java.awt.Color(255, 255, 255));
        Sepia.setText("  Sepia  ");
        Sepia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        Sepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SepiaActionPerformed(evt);
            }
        });

        MIrrored.setBackground(new java.awt.Color(12, 141, 255));
        MIrrored.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        MIrrored.setForeground(new java.awt.Color(255, 255, 255));
        MIrrored.setText("   Mirrored   ");
        MIrrored.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        MIrrored.setDefaultCapable(false);
        MIrrored.setIgnoreRepaint(true);
        MIrrored.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MIrroredActionPerformed(evt);
            }
        });

        GreyScale.setBackground(new java.awt.Color(12, 141, 255));
        GreyScale.setFont(new java.awt.Font("Avenir", 1, 14)); // NOI18N
        GreyScale.setForeground(new java.awt.Color(255, 255, 255));
        GreyScale.setText("  Grey Scale  ");
        GreyScale.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        GreyScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreyScaleActionPerformed(evt);
            }
        });

        Negative.setBackground(new java.awt.Color(12, 141, 255));
        Negative.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        Negative.setForeground(new java.awt.Color(255, 255, 255));
        Negative.setText("    Negative    ");
        Negative.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        Negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeActionPerformed(evt);
            }
        });

        HIstogram.setBackground(new java.awt.Color(12, 141, 255));
        HIstogram.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        HIstogram.setForeground(new java.awt.Color(255, 255, 255));
        HIstogram.setText("Histogram");
        HIstogram.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        HIstogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HIstogramActionPerformed(evt);
            }
        });

        Footer.setEditable(false);
        Footer.setBackground(new java.awt.Color(227, 229, 233));
        Footer.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        Footer.setForeground(new java.awt.Color(12, 141, 206));
        Footer.setText("© Chitrashala  version 1.0");
        Footer.setBorder(null);
        Footer.setCaretColor(new java.awt.Color(255, 255, 255));
        Footer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FooterActionPerformed(evt);
            }
        });

        progressLog.setEditable(false);
        progressLog.setColumns(20);
        progressLog.setFont(new java.awt.Font("Avenir", 0, 15)); // NOI18N
        progressLog.setForeground(new java.awt.Color(14, 121, 206));
        progressLog.setLineWrap(true);
        progressLog.setRows(5);
        progressLog.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(14, 121, 206)));
        progressLog.setCaretColor(new java.awt.Color(255, 255, 255));
        progressLog.setDisabledTextColor(new java.awt.Color(102, 255, 102));
        progressLog.setOpaque(false);
        progressLog.setSelectedTextColor(new java.awt.Color(102, 255, 102));
        jScrollPane3.setViewportView(progressLog);

        Progresslog.setEditable(false);
        Progresslog.setBackground(new java.awt.Color(227, 229, 233));
        Progresslog.setFont(new java.awt.Font("Avenir Next", 0, 19)); // NOI18N
        Progresslog.setText(" Progress Log");
        Progresslog.setAlignmentX(0.0F);
        Progresslog.setBorder(null);
        Progresslog.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        Progresslog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProgresslogActionPerformed(evt);
            }
        });

        ClearLog.setBackground(new java.awt.Color(12, 141, 255));
        ClearLog.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        ClearLog.setForeground(new java.awt.Color(255, 255, 255));
        ClearLog.setText("  Clear Log  ");
        ClearLog.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(37, 152, 255), 4));
        ClearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearLogActionPerformed(evt);
            }
        });

        Controls.setEditable(false);
        Controls.setBackground(new java.awt.Color(225, 227, 228));
        Controls.setFont(new java.awt.Font("Avenir Next", 0, 20)); // NOI18N
        Controls.setText("Controls");
        Controls.setAlignmentX(0.0F);
        Controls.setBorder(null);
        Controls.setDisabledTextColor(new java.awt.Color(255, 255, 153));
        Controls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ControlsActionPerformed(evt);
            }
        });

        Preview_Original.setBackground(new java.awt.Color(12, 141, 255));
        Preview_Original.setFont(new java.awt.Font("Avenir Next", 0, 13)); // NOI18N
        Preview_Original.setForeground(new java.awt.Color(255, 255, 255));
        Preview_Original.setText("Preview Original");
        Preview_Original.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        Preview_Original.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Preview_OriginalActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(225, 227, 228));

        Brightness.setEditable(false);
        Brightness.setBackground(new java.awt.Color(225, 227, 228));
        Brightness.setFont(new java.awt.Font("Avenir", 0, 19)); // NOI18N
        Brightness.setText(" Brightness");
        Brightness.setAlignmentX(0.0F);
        Brightness.setBorder(null);
        Brightness.setDisabledTextColor(new java.awt.Color(255, 255, 153));
        Brightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrightnessActionPerformed(evt);
            }
        });

        IncreaseBrightness.setBackground(new java.awt.Color(12, 141, 255));
        IncreaseBrightness.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        IncreaseBrightness.setForeground(new java.awt.Color(255, 255, 255));
        IncreaseBrightness.setText("Increase");
        IncreaseBrightness.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        IncreaseBrightness.setMultiClickThreshhold(5L);
        IncreaseBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IncreaseBrightnessActionPerformed(evt);
            }
        });

        DecreaseBrightness.setBackground(new java.awt.Color(12, 141, 255));
        DecreaseBrightness.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        DecreaseBrightness.setForeground(new java.awt.Color(255, 255, 255));
        DecreaseBrightness.setText("Decrease");
        DecreaseBrightness.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        DecreaseBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecreaseBrightnessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(IncreaseBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DecreaseBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(Brightness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(Brightness, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IncreaseBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DecreaseBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(225, 227, 228));

        Paste.setBackground(new java.awt.Color(12, 141, 255));
        Paste.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        Paste.setForeground(new java.awt.Color(255, 255, 255));
        Paste.setText("Paste");
        Paste.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });

        Download_Link.setBackground(new java.awt.Color(227, 229, 233));
        Download_Link.setFont(new java.awt.Font("Avenir Next", 0, 14)); // NOI18N
        Download_Link.setText("Paste Download Link");
        Download_Link.setAlignmentX(0.0F);
        Download_Link.setAutoscrolls(false);
        Download_Link.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(14, 141, 206)));
        Download_Link.setCaretColor(new java.awt.Color(227, 229, 233));
        Download_Link.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Download_Link.setDoubleBuffered(true);
        Download_Link.setFocusCycleRoot(true);
        Download_Link.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Download_LinkActionPerformed(evt);
            }
        });

        Save_As.setBackground(new java.awt.Color(227, 229, 233));
        Save_As.setFont(new java.awt.Font("Avenir Next", 0, 14)); // NOI18N
        Save_As.setText("SaveAs.jpg");
        Save_As.setAlignmentX(0.0F);
        Save_As.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(14, 141, 205)));
        Save_As.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_AsActionPerformed(evt);
            }
        });

        SaveAs.setBackground(new java.awt.Color(12, 141, 255));
        SaveAs.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        SaveAs.setForeground(new java.awt.Color(255, 255, 255));
        SaveAs.setText("Save Image");
        SaveAs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });

        Load.setBackground(new java.awt.Color(12, 141, 255));
        Load.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        Load.setForeground(new java.awt.Color(255, 255, 255));
        Load.setText("Load");
        Load.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        DownloadImage.setBackground(new java.awt.Color(12, 141, 255));
        DownloadImage.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        DownloadImage.setForeground(new java.awt.Color(255, 255, 255));
        DownloadImage.setText("Download Image");
        DownloadImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        DownloadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Save_As, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Download_Link, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(DownloadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Paste, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveAs, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Load, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Download_Link, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Paste, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Load, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DownloadImage, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Save_As)
                    .addComponent(SaveAs, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Restore.setBackground(new java.awt.Color(12, 141, 255));
        Restore.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        Restore.setForeground(new java.awt.Color(255, 255, 255));
        Restore.setText("Restore");
        Restore.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(12, 141, 255), 4));
        Restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreActionPerformed(evt);
            }
        });

        JSP_progress.setForeground(new java.awt.Color(12, 141, 206));

        javax.swing.GroupLayout Control_PanelLayout = new javax.swing.GroupLayout(Control_Panel);
        Control_Panel.setLayout(Control_PanelLayout);
        Control_PanelLayout.setHorizontalGroup(
            Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Control_PanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Control_PanelLayout.createSequentialGroup()
                        .addComponent(Controls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Control_PanelLayout.createSequentialGroup()
                        .addComponent(HIstogram, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85))))
            .addGroup(Control_PanelLayout.createSequentialGroup()
                .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JSP_progress, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Control_PanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(Progresslog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(Control_PanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(ClearLog, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(Control_PanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(Footer, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(Control_PanelLayout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(Control_PanelLayout.createSequentialGroup()
                                        .addComponent(Restore, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Preview_Original))
                                    .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(Control_PanelLayout.createSequentialGroup()
                                            .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(GreyScale, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(MIrrored, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(60, 60, 60)
                                            .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(Negative, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(Sepia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        Control_PanelLayout.setVerticalGroup(
            Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Control_PanelLayout.createSequentialGroup()
                .addComponent(Controls, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Sepia, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GreyScale, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MIrrored, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Negative, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(48, 48, 48)
                .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Preview_Original, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Restore, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HIstogram, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JSP_progress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(66, 66, 66)
                .addGroup(Control_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Progresslog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearLog, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Footer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(204, 204, 204));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setToolTipText("");
        jMenuBar1.setBorderPainted(false);
        jMenuBar1.setFont(new java.awt.Font("Avenir Next", 1, 15)); // NOI18N

        Jmi_File.setForeground(new java.awt.Color(12, 141, 206));
        Jmi_File.setText("File");
        Jmi_File.setFont(new java.awt.Font("Avenir Next", 1, 17)); // NOI18N

        jmi_LoadImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.META_MASK));
        jmi_LoadImage.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        jmi_LoadImage.setText("Load Image");
        jmi_LoadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_LoadImageActionPerformed(evt);
            }
        });
        Jmi_File.add(jmi_LoadImage);

        jmi_Clear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        jmi_Clear.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        jmi_Clear.setText("Clear");
        jmi_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_ClearActionPerformed(evt);
            }
        });
        Jmi_File.add(jmi_Clear);

        jmi_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.META_MASK));
        jmi_Exit.setFont(new java.awt.Font("Avenir", 0, 14)); // NOI18N
        jmi_Exit.setText("Exit");
        jmi_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_ExitActionPerformed(evt);
            }
        });
        Jmi_File.add(jmi_Exit);

        jMenuBar1.add(Jmi_File);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Control_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addComponent(Control_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jsp)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrightnessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BrightnessActionPerformed

    private void FooterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FooterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FooterActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
     if(flag==1){
     String s = Save_As.getText();
     File Save = new File("Output/"+s);
        try {
            if (!Save.getParentFile().exists()) {
                        Save.getParentFile().mkdirs();
                    }
            initImage(set);
            ImageIO.write(set, "jpg", Save);
            progressLog.append( s+" saved in Output Folder\n");
            
            
            // TODO add your handling code here:
        } 
        catch (IOException ex) {
            Logger.getLogger(Layout.class.getName()).log(Level.SEVERE, null, ex);
        }
       
         Desktop desktop = null;
        if (Desktop.isDesktopSupported()) {
        desktop = Desktop.getDesktop();
        }
        try {
         File folder = new File("/Users/saw/Desktop/Chitrashala 1.0/ChitraShala 1.0/Output");
         desktop.open(folder);
        } 
        catch (IOException e) {
            }
     }
     else
     {
         progressLog.append("Load Image First!!! \n");
     }
    }//GEN-LAST:event_SaveAsActionPerformed

    private void Save_AsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_AsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Save_AsActionPerformed

    private void Download_LinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Download_LinkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Download_LinkActionPerformed

    private void NegativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeActionPerformed
        // TODO add your handling code here:
        if(flag==1){
        for(int y=0;y<height;y++){
            for(int x=0;x<width;x++)
            {
                 p=tempImg.getRGB(x,y);
                 a =(p>>24)&0xff;
                 r =(p>>16)&0xff;
                 g=(p>>8)&0xff;
                 b =p&0xff;
                //conversion
              
                int tr=(int)(255-r);
                int tg=(int)(255-g);
                int tb=(int)(255-b);
                r=tr;
                g=tg;
                b=tb;
                p=(a<<24)|(r<<16)|(g<<8)|b;
                tempImg.setRGB(x,y,p);
               
            }
         Display(tempImg);
        }
         progressLog.append("Negative Complete\n");
        }
        else
            progressLog.append("Load Image First!!! \n");
    }//GEN-LAST:event_NegativeActionPerformed

    private void IncreaseBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IncreaseBrightnessActionPerformed
        // TODO add your handling code here:
        if(flag==1){
        for(int y=0;y<height;y++){
            for(int x=0;x<width;x++)
            {
                 p=tempImg.getRGB(x,y);
                 a =(p>>24)&0xff;
                 r =(p>>16)&0xff;
                 g=(p>>8)&0xff;
                 b =p&0xff;
                 r=(int)(r+fb);
                 g=(int)(g+fb);
                 b=(int)(b+fb);
                if(r>255)
                    r=255;
                if(g>255)
                    g=255;
                if(b>255)
                    b=255;
                p=(a<<24)|(r<<16)|(g<<8)|b;
                tempImg.setRGB(x,y,p);
            }
        }
        Display(tempImg);
        progressLog.append("Brightness Increased \n");
        
        }
        
        else
            progressLog.append("Load Image First!!! \n");
                
    }//GEN-LAST:event_IncreaseBrightnessActionPerformed

    private void SepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SepiaActionPerformed
        // TODO add your handling code here:
      if(sepia_flag==0){
          sepia_flag=1;
       if(flag==1){
        progressLog.append("Processing Image \n");
             
        for(int y=0;y<height;y++){
            for(int x=0;x<width;x++)
            {
                 p=tempImg.getRGB(x,y);
                 a =(p>>24)&0xff;
                 r =(p>>16)&0xff;
                 g=(p>>8)&0xff;
                 b =p&0xff;
                //conversion
                r=(int)(0.393*r+0.769*g+0.189*b);
                g =(int)(0.349*r+0.686*g+0.168*b);
                b =(int)(0.272*r+0.534*g+0.131*b);
                //System.out.println(r+"\t"+g+"\t"+b+"\t");
                if(r>255)
                    r=255;
                if(g>255)
                    g=255;
                if(b>255)
                    b=255;
                p=(a<<24)|(r<<16)|(g<<8)|b;
                tempImg.setRGB(x,y,p);
            }
        }
        Display(tempImg);
        progressLog.append("Sepia Complete\n");
        
        }
    
         
       else{
            progressLog.append("Load Image First!!! \n"); }
    }
       
    }//GEN-LAST:event_SepiaActionPerformed

    private void GreyScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GreyScaleActionPerformed
        // TODO add your handling code here:
        if(greyscale_flag==0){
        JSP_progress.setValue(5);
        greyscale_flag = 1;
        //ProgressBar.setValue(0);
        if(flag==1){
        try{
         progressLog.append("Processing Image\n");
        for(int y=0;y<height;y++){
            
           // ProgressBar.setValue(progress);
            for(int x=0;x<width;x++)
            {
                 p=tempImg.getRGB(x,y);
                 a =(p>>24)&0xff;
                 r =(p>>16)&0xff;
                 g=(p>>8)&0xff;
                 b =p&0xff;
                //conversion
                float sum = (float) ((0.299*r)+(0.587*g)+(0.299*b));
              
                 r=(int)(sum);
                 g=(int)(sum);
                 b=(int)(sum);
                if(r>255)
                    r=255;
          
                if(g>255)
                    g=255;

                if(b>255)
                    b=255;
                p=(a<<24)|(r<<16)|(g<<8)|b;
                tempImg.setRGB(x,y,p);
                /*float progress = y/height *100;
                JSP_progress.setValue((int)progress);*/
                
                
            }
        }
        progressLog.append("Grey-Scale Complete \n");        
        Display(tempImg);
        }
        catch(Exception e)
        {
            System.out.println("THere was an error"+ e.toString());
        }
        }
        else
                progressLog.append("Load Image First!!! \n");
                JSP_progress.setValue(100);
        }
       
    }//GEN-LAST:event_GreyScaleActionPerformed

    private void jmi_LoadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_LoadImageActionPerformed
        
        JFileChooser jfc = new JFileChooser();
         progressLog.append("Loading Image \n");
        if(jfc.showOpenDialog(jMenu1) == JFileChooser.APPROVE_OPTION)
        {
            greyscale_flag=0;
            sepia_flag=0;
            
            try{
            f = jfc.getSelectedFile();
            tempImg = ImageIO.read(f);
            flag=1;
         
            initImage(tempImg);
            Display(tempImg);
            progressLog.append("Done \n");
            JSP_progress.setValue(0);

            //jLab.setIcon(new ImageIcon(tempImg));
            //jLab.setHorizontalAlignment(JLabel.CENTER);
            //jSP.getViewport().add(jLab);
            }
            catch(Exception e)
            {
                System.out.println("An Error has occoured"+ e.toString());
                
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jmi_LoadImageActionPerformed

    private void jmi_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_ClearActionPerformed
        // TODO add your handling code here:
           jLab.setIcon(null);
        f=null;
        flag=0;
    }//GEN-LAST:event_jmi_ClearActionPerformed

    private void jmi_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_ExitActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        System.exit(0);
       /* try{
         tempImg = ImageIO.read(f);
         Display(tempImg);
         initImage(tempImg);
        }
        catch(Exception e)
        {
            progressLog.append("Load Image First!!! \n");
            System.out.println("Load Image First \n");
            //System.out.Println("Load Image First");
        }*/
    }//GEN-LAST:event_jmi_ExitActionPerformed

    private void ProgresslogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProgresslogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProgresslogActionPerformed

    private void MIrroredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MIrroredActionPerformed
        // TODO add your handling code here:
        if(flag==1)
        {
        BufferedImage tempMimg = new BufferedImage(width*2,height,BufferedImage.TYPE_INT_ARGB);
        for(int y=0;y<height;y++)
        {
            for(int lx=0,rx=width*2-1;lx<width;lx++,rx--)
            {
                 p= tempImg.getRGB(lx,y);
                tempMimg.setRGB(lx,y,p);
                tempMimg.setRGB(rx,y,p);   
            }
        }
        initImage(tempMimg);
        tempImg = tempMimg;
        progressLog.append("Mirror complete \n");
        Display(tempImg);
        }
        else
            progressLog.append("Load Image First!!! \n");
    }//GEN-LAST:event_MIrroredActionPerformed
     int c;
    private void DecreaseBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecreaseBrightnessActionPerformed
        // TODO add your handling code here:
        if(flag==1){
        for(int y=0;y<height;y++){
            // c = ((y/height)*100);
             //   ProgressBar.setValue(c);
            for(int x=0;x<width;x++)
            {
                 p=tempImg.getRGB(x,y);
                 a =(p>>24)&0xff;
                 r =(p>>16)&0xff;
                 g=(p>>8)&0xff;
                 b =p&0xff;
                 r=(int)(r-fb);
                 g=(int)(g-fb);
                 b=(int)(b-fb);
                if(r<0)
                    r=0;
                if(g<0)
                    g=0;
                if(b<0)
                    b=0;
                p=(a<<24)|(r<<16)|(g<<8)|b;
                tempImg.setRGB(x,y,p);
            
               // ProgressBar.set
               // ProgressBar.setCursor(cursor);
            }
        }
        Display(tempImg);
        progressLog.append("Brightness Decreased \n");
        
        }
        
        else
            progressLog.append("Load Image First!!! \n");
                                  
    }//GEN-LAST:event_DecreaseBrightnessActionPerformed

    private void jspMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jspMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jspMousePressed

    private void HIstogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HIstogramActionPerformed
        // TODO add your handling code here:
        if(flag ==1){
        new Histogram(tempImg);
        }
        else
                progressLog.append("Load Image First!!! \n");
                  
    }//GEN-LAST:event_HIstogramActionPerformed

    private void ClearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearLogActionPerformed
        // TODO add your handling code here:
        progressLog.setText(null);
    }//GEN-LAST:event_ClearLogActionPerformed
    
    private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
        // TODO add your handling code here:


        Transferable t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(this);

        try {
        if (t != null && t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            String text1 = (String)t.getTransferData(DataFlavor.stringFlavor);
            Download_Link.setText(text1);
        }
        }
         catch (UnsupportedFlavorException | IOException e) {
             progressLog.append("There was an erro");
            
        }
        
    }//GEN-LAST:event_PasteActionPerformed
    public void ChangeContrast (int contrast)
    {
        double factor = 1.01;
        //factor = (float) ((259 * (contrast + 255.0)) / (255 * (259.0 - contrast)));
        if(flag==1){
        try{
        progressLog.append("Processing Image\n");
        for(int y=0;y<height;y++){
            
            for(int x=0;x<width;x++)
            {
                 p=tempImg.getRGB(x,y);
                 a =(p>>24)&0xff;
                 r =(p>>16)&0xff;
                 g=(p>>8)&0xff;
                 b =p&0xff;
                 r=(int)(factor*(r-128)+128);
                 g=(int)(factor*(g-128)+128);
                 b=(int)(factor*(b-128)+128);
                if(r>255)
                    r=255;
          
                if(g>255)
                    g=255;

                if(b>255)
                    b=255;
                p=(a<<24)|(r<<16)|(g<<8)|b;
                tempImg.setRGB(x,y,p);
                
                
            }
        }
        Display(tempImg);
        }
        catch(Exception e)
        {
            System.out.println("THere was an error"+ e.toString());
        }
        }
        else
                progressLog.append("Load Image First!!! \n");
                  
    }
    
    private void ControlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ControlsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ControlsActionPerformed

    private void Preview_OriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Preview_OriginalActionPerformed
        if(flag==1){try {
            // TODO add your handling code here:
            Desktop.getDesktop().open(f);
        } catch (IOException ex) {
            Logger.getLogger(Layout.class.getName()).log(Level.SEVERE, null, ex);
        }}
        else
            progressLog.append("Load Image First\n");
    }//GEN-LAST:event_Preview_OriginalActionPerformed

    private void RestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreActionPerformed
            // TODO add your handling code here:
        try{
         tempImg = ImageIO.read(f);
         Display(tempImg);
         initImage(tempImg);
         progressLog.append("Original Image Restored \n");
         sepia_flag=0;
         greyscale_flag=0;
        }
        catch(Exception e)
        {
            progressLog.append("Load Image First!!! \n");
            System.out.println("Load Image First");
            //System.out.Println("Load Image First");
        }
       
    }//GEN-LAST:event_RestoreActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        sepia_flag=0;
        greyscale_flag=0;
       f = new File(FileName);
       if(f.canRead()){
        try {
            tempImg = ImageIO.read(f);
        } catch (IOException ex) {
            Logger.getLogger(Layout.class.getName()).log(Level.SEVERE, null, ex);
        }
        Display(tempImg);
        flag=1;
        initImage(tempImg); 
        progressLog.append("Image Loaded \n");
       }
       else
       {
           progressLog.append("No Item In Downloads \n");
       }
    }//GEN-LAST:event_LoadActionPerformed

    private void DownloadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadImageActionPerformed

       progressLog.append("Please Wait\n");
       DownloadImage();
    }//GEN-LAST:event_DownloadImageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Layout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /*  try {
        UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        //</editor-fold>
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
        Logger.getLogger(Layout.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Layout().setVisible(true);
               // Display(new LoadScreen(f));
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Brightness;
    private javax.swing.JButton ClearLog;
    private javax.swing.JPanel Control_Panel;
    private javax.swing.JTextField Controls;
    private javax.swing.JButton DecreaseBrightness;
    private javax.swing.JButton DownloadImage;
    private javax.swing.JTextField Download_Link;
    private javax.swing.JTextField Footer;
    private javax.swing.JButton GreyScale;
    private javax.swing.JButton HIstogram;
    private javax.swing.JButton IncreaseBrightness;
    private javax.swing.JProgressBar JSP_progress;
    private javax.swing.JMenu Jmi_File;
    private javax.swing.JButton Load;
    private javax.swing.JButton MIrrored;
    private javax.swing.JButton Negative;
    private javax.swing.JButton Paste;
    private javax.swing.JButton Preview_Original;
    private javax.swing.JTextField Progresslog;
    private javax.swing.JButton Restore;
    private javax.swing.JButton SaveAs;
    private javax.swing.JTextField Save_As;
    private javax.swing.JButton Sepia;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem jmi_Clear;
    private javax.swing.JMenuItem jmi_Exit;
    private javax.swing.JMenuItem jmi_LoadImage;
    private javax.swing.JScrollPane jsp;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JTextArea progressLog;
    // End of variables declaration//GEN-END:variables
}
